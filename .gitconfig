[user]
  name = nju33
  email = nju33.ki@gmail.com
[alias]
  s = status
  ow = show
  ra = remote add
  rao = remote add origin
  rs = remote set-url
  rso = remote set-url origin
  rp = remote prune --dry-run
  rP = remote prune
  p = push
  pu = push -u
  ll = pull
  llr = pull --rebase
  ft = fetch
  rbm = rebase master
  rbi = rebase -i
  rbir = rebase -i --root
  a = add
  ap = add -p
  ad = add
  adm = "!f() { git ls-files -m | xargs git add ; }; f"
  c = commit
  cm = commit
  empty-commit= commit --allow-empty --allow-empty-message -m 'Init'
  co = checkout
  rpar = rev-parse --abbrev-ref HEAD
  codb= "!f() { bash -c '\
    url=$(git ls-remote --get-url); \
    default_branch=$(git ls-remote --symref $url | head -n1 | cut -d/ -f3 | cut -f1 ); \
    git checkout ${default_branch} > /dev/null \
      && git branch -d $0 \
      && git checkout -b $0 ; \
  ' $1 ; }; f"
  ours = git checkout --ours
  theirs = git checkout --theirs
  br = branch
  ba = branch -a
  bm = branch --merged
  bn = branch --no-merged
  back = reset --hard HEAD~1
  wc = whatchanged
  ls = log --pretty=oneline
  lsa = log --stat
  lp = log -p
  l- = log --pretty=oneline -1
  l-- = log --pretty=oneline -2
  l--- = log --pretty=oneline -3
  l---- = log --pretty=oneline -4
  l----- = log --pretty=oneline -5
  df = diff master
  ds = diff --staged
  gr = grep -n
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # Modifiedなファイルのn番目をatomで開く
  # atom = "!f() { git ls-files --modified | sed -n 1p; }; [ -z '`f`'] && atom `f`"
  # atom1 = "!f() { git ls-files --modified | sed -n 1p; }; [ -z '`f`'] && atom `f`"
  # atom2 = "!f() { git ls-files --modified | sed -n 2p; }; [ -z '`f`'] && atom `f`"
  # atom3 = "!f() { git ls-files --modified | sed -n 3p; }; [ -z '`f`'] && atom `f`"
  # atom4 = "!f() { git ls-files --modified | sed -n 4p; }; [ -z '`f`'] && atom `f`"
  # atom5 = "!f() { git ls-files --modified | sed -n 5p; }; [ -z '`f`'] && atom `f`"
  # atom6 = "!f() { git ls-files --modified | sed -n 6p; }; [ -z '`f`'] && atom `f`"
  # atom7 = "!f() { git ls-files --modified | sed -n 7p; }; [ -z '`f`'] && atom `f`"
  # atom8 = "!f() { git ls-files --modified | sed -n 8p; }; [ -z '`f`'] && atom `f`"
  # atom9 = "!f() { git ls-files --modified | sed -n 9p; }; [ -z '`f`'] && atom `f`"
  # atom10 = "!f() { git ls-files --modified | sed -n 10p; }; [ -z '`f`'] && atom `f`"
  # atom11 = "!f() { git ls-files --modified | sed -n 11p; }; [ -z '`f`'] && atom `f`"
  # atom12 = "!f() { git ls-files --modified | sed -n 12p; }; [ -z '`f`'] && atom `f`"
  # atom13 = "!f() { git ls-files --modified | sed -n 13p; }; [ -z '`f`'] && atom `f`"
  # atom14 = "!f() { git ls-files --modified | sed -n 14p; }; [ -z '`f`'] && atom `f`"
  # atom15 = "!f() { git ls-files --modified | sed -n 15p; }; [ -z '`f`'] && atom `f`"
  uisk = "!f() { git update-index --skip-worktree `find . -type f -name $1` && git ls-files -v `find . -type f -name $1`; }; f"
  uisk = "!f() { git update-index --no-skip-worktree `find . -type f -name $1` && git ls-files -v `find . -type f -name $1`; }; f"
[core]
  editor = code --wait
